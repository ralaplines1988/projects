{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","e","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","key","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","url","uri","savePlaylist","trackUris","length","console","log","userId","method","body","JSON","stringify","playlistId","urls","App","playlistName","updatePlaylistName","find","savedTrack","push","newPlaylistTracks","filter","trackURIs","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5eb95de5.chunk.js","sourcesContent":["const clientId = '0a2701d18f7d4acfab2fb19e1cf43949';\r\nconst redirectUri = 'http://forsure.surge.sh/';\r\n\r\nlet accessToken;\r\n\r\nexport const Spotify = {\r\n    getAccessToken(){\r\n        if(accessToken){\r\n            return accessToken;\r\n        }\r\n\r\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n        if(accessTokenMatch && expiresInMatch) {\r\n            accessToken = accessTokenMatch[1];\r\n            const expiresIn = Number(expiresInMatch[1]);\r\n            window.setTimeout(()=> accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n            return accessToken;\r\n        } else {\r\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n            window.location = accessUrl;\r\n        }\r\n    },\r\n\r\n    search(term){\r\n        const accessToken = Spotify.getAccessToken();\r\n        //console.log(accessToken);\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,{\r\n            headers: {\r\n                Authorization: `Bearer ${accessToken}`\r\n            }\r\n        }).then(response => {\r\n            //console.log(response);\r\n            return response.json();\r\n        }).then(jsonResponse => {\r\n            //console.log(jsonResponse);\r\n            if(!jsonResponse.tracks) {\r\n                return [];\r\n            }\r\n            return jsonResponse.tracks.items.map(track=>({\r\n                id: track.id,\r\n                name: track.name,\r\n                artist: track.artists[0].name,\r\n                url: track.uri\r\n            }))\r\n        });\r\n    },\r\n\r\n    savePlaylist(name,trackUris) {\r\n        if(!name || !trackUris.length){\r\n            return;\r\n        }\r\n        console.log(name,trackUris);\r\n        const accessToken = Spotify.getAccessToken();\r\n        const headers = { Authorization: `Bearer ${accessToken}`};\r\n        let userId;\r\n\r\n        return fetch('https://api.spotify.com/v1/me', {headers: headers }\r\n        ).then(response=> {\r\n            return response.json();\r\n        }).then(jsonResponse => {\r\n            userId = jsonResponse.id;\r\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,\r\n            {\r\n                headers: headers,\r\n                method: 'POST',\r\n                body: JSON.stringify({ name: name})\r\n            })\r\n        }).then(response => response.json())\r\n        .then(jsonResponse =>{\r\n            const playlistId = jsonResponse.id;\r\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`,\r\n            {\r\n                headers: headers,\r\n                method: 'POST',\r\n                body: JSON.stringify({ urls: trackUris})\r\n            });\r\n        });\r\n    }\r\n};","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nexport class SearchBar extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            term: ''\r\n        }\r\n\r\n        this.search = this.search.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n    }\r\n    search(){\r\n        this.props.onSearch(this.state.term);\r\n    }\r\n\r\n    handleTermChange(e){\r\n        this.setState({\r\n            term: e.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange}/>\r\n                <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\r\n            </div>\r\n        );\r\n    }\r\n};","import React from 'react';\r\nimport './Track.css';\r\n\r\nexport class Track extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack = this.removeTrack.bind(this);\r\n    }\r\n    renderAction(){\r\n        if(this.props.isRemoval) {\r\n            return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\r\n        } else {\r\n            return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\r\n        }\r\n    }\r\n    \r\n    addTrack(){\r\n        this.props.onAdd(this.props.track);\r\n    }\r\n\r\n    removeTrack(){\r\n        this.props.onRemove(this.props.track);\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Track\">\r\n                <div className=\"Track-information\">\r\n                    <h3>{this.props.track.name}</h3>\r\n                    <p>{this.props.track.artist} | {this.props.track.album}</p>\r\n                </div>\r\n                {this.renderAction()}\r\n            </div>\r\n        );\r\n    }\r\n};","import React from 'react';\r\nimport './TrackList.css';\r\nimport {Track} from '../Track/Track';\r\n\r\nexport class TrackList extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"TrackList\">\r\n            {\r\n                this.props.tracks.map(track => {\r\n                    return <Track key={track.id} track={track} onAdd={this.props.onAdd} onRemove={this.props.onRemove} isRemoval={this.props.isRemoval}/>\r\n                })\r\n            }\r\n            </div>\r\n        );\r\n    }\r\n};","import React from 'react';\r\nimport './SearchResults.css';\r\nimport {TrackList} from '../TrackList/TrackList';\r\n\r\nexport class SearchResults extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"SearchResults\">\r\n                <h2>Results</h2>\r\n                <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} isRemoval={false}/>\r\n            </div>\r\n        );\r\n    }\r\n};","import React from 'react';\r\nimport './Playlist.css';\r\nimport {TrackList} from '../TrackList/TrackList';\r\n\r\nexport class Playlist extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n    }\r\n    handleNameChange(e){\r\n        this.props.onNameChange(e.target.value);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"Playlist\">\r\n                <input defaultValue={\"New Playlist\"} onChange={this.handleNameChange}/>\r\n                <TrackList tracks={this.props.playlistTracks} onRemove={this.props.onRemove} isRemoval={true} />\r\n                <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\r\n            </div>\r\n        );\r\n    }\r\n};","import React from 'react';\nimport './App.css';\nimport {SearchBar} from '../SearchBar/SearchBar';\nimport {SearchResults} from '../SearchResults/SearchResults';\nimport {Playlist} from '../Playlist/Playlist';\nimport {Spotify} from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: 'New Playlist',\n      playlistTracks: []\n    }\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track){\n    let tracks = this.state.playlistTracks;\n    if(tracks.find(savedTrack => savedTrack.id === track.id)){\n      return;\n    }\n    \n    tracks.push(track);\n    this.setState({\n      playlistTracks: tracks\n    });\n  }\n\n  removeTrack(track){\n    const newPlaylistTracks = this.state.playlistTracks.filter(savedTrack => savedTrack.id != track.id);\n    this.setState({\n      playlistTracks: newPlaylistTracks\n    });\n  }\n\n  updatePlaylistName(name){\n    this.setState({\n      playlistName: name\n    });\n  }\n\n  savePlaylist(){\n    const trackURIs = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackURIs).then(()=>{\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      })\n    })\n  }\n\n  search(term){\n    Spotify.search(term).then(searchResults => {\n      this.setState({\n        searchResults: searchResults\n      })\n    })\n  }\n\n  render(){\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search}/>\n          <div className=\"App-playlist\">\n          <SearchResults \n          searchResults={this.state.searchResults} \n          onAdd={this.addTrack}\n          />\n          <Playlist \n          playlistName={this.state.playlistName} \n          playlistTracks={this.state.playlistTracks} \n          onRemove={this.removeTrack} \n          onNameChange={this.updatePlaylistName}\n          onSave={this.savePlaylist}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}